use crate::package_manager::composer::{
    ComposerLockVersionNotice, PlatformExtractorNotice, PlatformFinalizerNotice,
};
use crate::php_project::{PlatformJsonNotice, ProjectLoaderNotice};
use crate::PhpBuildpackNotice;
use indoc::{formatdoc, indoc};

pub(crate) fn log(notice: PhpBuildpackNotice) {
    libherokubuildpack::log::log_info(format!("NOTICE: {}", get_message(notice).trim()));
}

#[rustfmt::skip] // formatting is much more consistent this way (line lengths!)
fn get_message(notice: PhpBuildpackNotice) -> String {
    match notice {
        PhpBuildpackNotice::ProjectLoader(n) => match n {
            ProjectLoaderNotice::NameFromEnvVar(name, value) => formatdoc! {"
                Environment variable '{name}={value}' is overriding default file name.
            "},
        },
        PhpBuildpackNotice::PlatformJson(n) => match n {
            PlatformJsonNotice::Extractor(n) => match n {
                PlatformExtractorNotice::ComposerLockVersion(n) => match n {
                    ComposerLockVersionNotice::NoComposerPluginApiVersionInLock(default) => formatdoc! {"
                        No Composer 'plugin-api-version' field recorded in lock file; file must be very old. \
                        Will attempt to use a Composer release matching plugin API version '{default}' for installation.
                    "},
                    ComposerLockVersionNotice::ComposerPluginApiVersionConfined(input, output) => formatdoc! {"
                        Lock file 'plugin-api-version' indicates contents were generated by a Composer release with plugin API version '{input}'. \
                        For best plugin compatibility, a Composer release matching plugin API version '{output}' will be used for installation.
                    "},
                },
            },
            PlatformJsonNotice::Finalizer(n) => match n {
                PlatformFinalizerNotice::RuntimeRequirementInserted(name, version) => formatdoc! {"
                    No runtime requirement found in lock file; using version constraint '{version}' for package '{name}'. 
                "},
                PlatformFinalizerNotice::RuntimeRequirementFromDependencies => indoc! {"
                    No runtime requirement found in lock file; runtime requirements from dependencies will be used for version selection.
                "}.to_string(),
            },
        },
    }
}
